(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Leon, converted to v2.6 by CVC4
Application: Inductive theorem proving
Target solver: CVC4, Z3
Publications: "Induction for SMT Solvers" by Andrew Reynolds, and Viktor Kuncak, VMCAI 2015.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst 0)(Nat 0)) (((cons (head Nat) (tail Lst)) (nil))
((succ (pred Nat)) (zero))
))
(declare-fun len (Lst) Nat)
(assert (= (len nil) zero))
(assert (forall ((x Nat) (y Lst)) (= (len (cons x y)) (succ (len y))) ))
(declare-fun append (Lst Lst) Lst)
(assert (forall ((x Lst)) (= (append nil x) x) ))
(assert (forall ((x Nat) (y Lst) (z Lst)) (= (append (cons x y) z) (cons x (append y z))) ))
(declare-fun rotate (Nat Lst) Lst)
(assert (forall ((x Lst)) (= (rotate zero x) x) ))
(assert (forall ((n Nat)) (= (rotate (succ n) nil) nil) ))
(assert (forall ((n Nat) (y Nat) (x Lst)) (= (rotate (succ n) (cons y x)) (rotate n (append x (cons y nil)))) ))
(declare-fun plus (Nat Nat) Nat)
(assert (forall ((n Nat)) (= (plus zero n) n) ))
(assert (forall ((n Nat) (m Nat)) (= (plus (succ n) m) (succ (plus n m))) ))
(assert (not (forall ((x Lst) (y Lst) (z Lst)) (= (append (append x y) z) (append x (append y z))) )))
(check-sat)
(exit)

